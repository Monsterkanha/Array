Here matrix is not uniform;

1. Using Hashmap store values at current offset.

vector<int> findDiagonalOrder(vector<vector<int>>& nums) {
    int n = nums.size();
    unordered_map<int, vector<int>> M;
    int maxi = 0;
    for(int i = 0 ; i < n ; i++){
        for(int j = 0 ; j < nums[i].size(); j++){
            M[i+j].push_back(nums[i][j]);
            maxi = max(i+j , maxi);
        }
    }
    vector<int> ans;
    for(int i = 0 ; i <= maxi; i++){
        for(auto it = M[i].rbegin() ; it != M[i].rend(); it++){
            ans.push_back(*it);
        }
    }
    return ans;
}

2. BFS :-

Insert its bottom element if it is element in first coloumn. and then add its right element if exist.

#define ff first
#define ss second
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& nums) {
        int n = nums.size();
        vector<int> ans;
        
        queue<pair<int, int>> q;
        q.push({0,0});
        while(!q.empty()){
            pair<int ,int> curr = q.front();
            q.pop();
            ans.push_back(nums[curr.ff][curr.ss]);
            if(curr.ss == 0 && curr.ff + 1 < n){
                q.push({curr.ff+ 1, curr.ss});
            }
            if(curr.ss +1 < nums[curr.ff].size()){
                q.push({curr.ff, curr.ss+1});
            }
        }
        return ans;
    }
};
