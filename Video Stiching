eg. 
0, 3   
1 ,4
2, 5

We will choose the video which is suitable to shoot at current place and also able to maxdrift.

initial curr val = 0 , and maxreached = 0;
We select from all available videos which is lesser than our curr_val and whose end point is as far as possible now we will replace our curr to that position.

int mn = 0 , mx = 0, tot = 0;
while(mx < time){
    for(int i = 0 ; i < clips.size(); i++){
        int l = clips[i][0];
        int r = clips[i][1];
        
        // We will select the one who cover our mn value and whose right most is maximum and update that. 
        if(l <= mn && r > mx){
            mx = r;
        }

    }
    if(mn == mx) return -1;
    tot++;
    mn = mx;
}
return tot;


Merge Intervals.


insert a new interval and merge it.

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    vector<Interval> ans;
    int n = intervals.size();
    int i= 0;
    while(i < n && intervals[i].end < newInterval.start){
        ans.push_back(intervals[i]);
        i++;
        
    }
    if(i == n){
        ans.push_back(newInterval);
        return ans;
    }
    int st = min(intervals[i].start, newInterval.start);
    while(i < n && intervals[i].start < newInterval.end){
        i++;
    }
    int end = max(intervals[i-1].end , newInterval.end);
    ans.push_back(Interval(st, end));
    while(i < n){
        ans.push_back(intervals[i]);
        i++;
    }
    return ans;
}



