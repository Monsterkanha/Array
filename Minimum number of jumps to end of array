Greedy + BFS 
Here at curr level we will choose the fartest reachable node.


we keep two pointers start and end that record the current range of the starting nodes.
Each time after we make a move, update start to be end + 1 and end to be the farthest index that can be reached in 1 move from the current [start, end].

int jump(vector<int>& nums) {
  int n = nums.size(), step = 0, start = 0, end = 0;
  while (end < n - 1) {
      step++; 
      int maxend = end + 1;
      for (int i = start; i <= end; i++) {
          if (i + nums[i] >= n - 1) return step;
          maxend = max(maxend, i + nums[i]);
       }
       if(i >= maxend) return -1;
       start = end + 1;
       end = maxend;
   }
   return step;
}
