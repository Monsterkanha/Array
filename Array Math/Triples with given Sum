If our sum is in given range then we simply return.
if our sum is lesser than lower bound then we will change our maximum value.
If our sum is greater we will change minimum value. 

int n = A.size();
if(n < 3){
    return 0;
}
vector<float> arr;
for(auto x: A){
    arr.push_back(stof(x));
}
float a = arr[0] , b = arr[1] , c= arr[2];
for(int i = 3; i < n ; i++){
    if(a + b +c < 2 && a + b + c >1)    return 1;
    else if(a + b +c > 2){
        if(a > b && a > c){
            a = arr[i];
        }
        else if(b > a && b> c){
            b = arr[i];
        }
        else c = arr[i];
    }
    else{
        if(a < b && a <  c){
            a = arr[i];
        }
        else if(b < a && b < c){
            b = arr[i];
        }
        else c = arr[i];
    }
}
if(a + b + c < 2 && a + b +c > 1){
    return 1;
}
return 0;



Another solution. First sort the vector and then apply search using three pointer.
int n = A.size();
if(n < 3){
    return 0;
}
vector<float> arr;
for(auto x: A){
    arr.push_back(stof(x));
}
sort(arr.begin() ,arr.end());
int i= 0 ,  k = i+1, j = n-1;
if(arr[0] > 2) return 0;

while(i < j && k < j && j> k){
    if(arr[i] + arr[j] + arr[k] < 2 && arr[i] + arr[j] + arr[k] > 1)    return 1;
    else {
        if(arr[i] + arr[j] + arr[k] <= 1) i++, k++;
        else if(arr[i] + arr[j] + arr[k] >= 2) j--;
    }
}
return 0;
