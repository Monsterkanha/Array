Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order,
then the whole array will be sorted in ascending order.
Return the shortest such subarray and output its length.


First approach, sort the array and calculate the least and max index where there is a change.

int findUnsortedSubarray(vector<int>& nums) {
    vector<int> temp = nums;
    int n= nums.size();
    sort(temp.begin() , temp.end());


    int i = 0 , j = n -1;
    while(i < n && temp[i] == nums[i])  i++;
    while(j > i && temp[j] == nums[j])  j--;
    return j - i +1;
}


Or in O(n)
1. If current element is greater than any of element on its right :- which means if minimum from right is lesser than curr then it need to be change.
2. If current element is smaller than any of element on its left :- which means it need to be change.
 
The idea is that:

From the left, for a number to stay untouched, there need to be no number less than it on the right hand side;
From the right, for a number to stay untouched, there need to be no number greater than it on the left hand side;
Those 2 can be easily checked if we build 2 vectors:

max so far from the left,
and min so far from the right;
/**
 *            /------------\
 * nums:  [2, 6, 4, 8, 10, 9, 15]
 * minr:   2  4  4  8   9  9  15
 *         <--------------------
 * maxl:   2  6  6  8  10 10  15
 *         -------------------->
 */
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        vector<int> maxlhs(n);   // max number from left to cur
        vector<int> minrhs(n);   // min number from right to cur
        for (int i = n - 1, minr = INT_MAX; i >= 0; i--) minrhs[i] = minr = min(minr, nums[i]);
        for (int i = 0,     maxl = INT_MIN; i < n;  i++) maxlhs[i] = maxl = max(maxl, nums[i]);

        int i = 0, j = n - 1;
        while (i < n && nums[i] <= minrhs[i]) i++;
        while (j > i && nums[j] >= maxlhs[j]) j--;

        return j + 1 - i;
    }
};




3. Without extra space. 


if(nums == null) return 0;
if(nums.Length == 0 || nums.Length == 1) return 0;

int max = Int32.MinValue;
int end = -2;
//iterate from beginning of array
//find the last element which is smaller than the last seen max from 
//its left side and mark it as end
for(int i = 0; i < nums.Length; i ++){
    max = Math.Max(max, nums[i]);
    if(nums[i] < max)
        end = i;
}

int min = Int32.MaxValue;
int begin = -1;
//iterate from end of array
//find the last element which is bigger than the last seen min from 
//its right side and mark it as begin
for(int i = nums.Length - 1; i >= 0; i --){
    min = Math.Min(min, nums[i]);
    if(nums[i] > min)
        begin = i;
}

return end - begin + 1;
